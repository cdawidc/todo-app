{"ast":null,"code":"var _jsxFileName = \"/Users/dawid/Documents/TRAE/todoapp/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [tasks, setTasks] = useState([]);\n  const [newTaskText, setNewTaskText] = useState('');\n  useEffect(() => {\n    fetch('http://localhost:5005/tasks').then(res => res.json()).then(data => setTasks(data));\n  }, []);\n  const addTask = () => {\n    fetch('http://localhost:5005/tasks', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        text: newTaskText,\n        done: false\n      })\n    }).then(res => res.json()).then(task => setTasks([...tasks, task]));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Moja lista zada\\u0144\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: newTaskText,\n      onChange: e => setNewTaskText(e.target.value),\n      placeholder: \"Nowe zadanie\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addTask,\n      children: \"Dodaj\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: tasks.map(task => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: task.text\n      }, task.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"C0xvBMzDBNlXma/BxQeTgJ0hnN0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","App","_s","tasks","setTasks","newTaskText","setNewTaskText","fetch","then","res","json","data","addTask","method","headers","body","JSON","stringify","text","done","task","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","map","id","_c","$RefreshReg$"],"sources":["/Users/dawid/Documents/TRAE/todoapp/frontend/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nfunction App() {\n  const [tasks, setTasks] = useState([]);\n  const [newTaskText, setNewTaskText] = useState('');\n\n  useEffect(() => {\n    fetch('http://localhost:5005/tasks')\n      .then(res => res.json())\n      .then(data => setTasks(data));\n  }, []);\n\n  const addTask = () => {\n    fetch('http://localhost:5005/tasks', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ text: newTaskText, done: false }),\n    })\n      .then(res => res.json())\n      .then(task => setTasks([...tasks, task]));\n  };\n\n  return (\n    <div style={{ padding: 20 }}>\n      <h1>Moja lista zada≈Ñ</h1>\n      <input\n        value={newTaskText}\n        onChange={e => setNewTaskText(e.target.value)}\n        placeholder=\"Nowe zadanie\"\n      />\n      <button onClick={addTask}>Dodaj</button>\n      <ul>\n        {tasks.map(task => (\n          <li key={task.id}>{task.text}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAElDD,SAAS,CAAC,MAAM;IACdU,KAAK,CAAC,6BAA6B,CAAC,CACjCC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIP,QAAQ,CAACO,IAAI,CAAC,CAAC;EACjC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,OAAO,GAAGA,CAAA,KAAM;IACpBL,KAAK,CAAC,6BAA6B,EAAE;MACnCM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAEb,WAAW;QAAEc,IAAI,EAAE;MAAM,CAAC;IACzD,CAAC,CAAC,CACCX,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC,CACvBF,IAAI,CAACY,IAAI,IAAIhB,QAAQ,CAAC,CAAC,GAAGD,KAAK,EAAEiB,IAAI,CAAC,CAAC,CAAC;EAC7C,CAAC;EAED,oBACEpB,OAAA;IAAKqB,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAG,CAAE;IAAAC,QAAA,gBAC1BvB,OAAA;MAAAuB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB3B,OAAA;MACE4B,KAAK,EAAEvB,WAAY;MACnBwB,QAAQ,EAAEC,CAAC,IAAIxB,cAAc,CAACwB,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;MAC9CI,WAAW,EAAC;IAAc;MAAAR,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3B,CAAC,eACF3B,OAAA;MAAQiC,OAAO,EAAErB,OAAQ;MAAAW,QAAA,EAAC;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACxC3B,OAAA;MAAAuB,QAAA,EACGpB,KAAK,CAAC+B,GAAG,CAACd,IAAI,iBACbpB,OAAA;QAAAuB,QAAA,EAAmBH,IAAI,CAACF;MAAI,GAAnBE,IAAI,CAACe,EAAE;QAAAX,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAClC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACzB,EAAA,CApCQD,GAAG;AAAAmC,EAAA,GAAHnC,GAAG;AAsCZ,eAAeA,GAAG;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}